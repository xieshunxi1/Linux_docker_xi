version: "3"
services:
  database.postgres:
    image: postgres:12.4-alpine
    container_name: ttrss-postgres
    restart: always
    environment:
      - PGDATA=/var/lib/postgresql/data   # 可自行设置，注释掉这项，则为默认数据文件为/var/lib/postgresql/data
      - POSTGRES_USER=postgres1     #用户名 可自行更改,注释掉这项，则为默认用户名postgres
      - POSTGRES_PASSWORD=ttrssxi    #密码 可自行更改
    #   - POSTGRES_DB=inventory
    volumes:
      - ./dataxi:/var/lib/postgresql/data   # 将docker文件夹/var/lib/postgresql/data挂载到宿主机文件夹的相对路径/dataxi,“./”表示运行命令所在文件夹路径，“~/”ssh命令所在用户目录，不加为绝对路径
    ports:
      - 15432:5432 # 开放端口给外部使用
    # expose:
    #   - 5432  #将当前容器的端口3001暴露给link到本容器的容器。
      
  service.rss:
    image: wangqiru/ttrss:latest
    container_name: ttrss-app
    ports:
      - 181:80 # 冒号之前是你需要访问的端口，后面的80不需要修改
    links:
      - service.rsshub:rsshub.app  #可以用别名rsshub.app代表该容器的ip，即http://rsshub.app:80
      - service.mercury:mercury.api
    environment:
      #- TZ=Asia/Shanghai
      - SELF_URL_PATH=http://192.168.5.138:181/ # 修改为你自己的域名+端口
      - ALLOW_PORTS=1200,3000 # 加入这个配置,才能访问rsshub默认的1200
      - DB_HOST=database.postgres
      - DB_PORT=5432
      - DB_NAME=ttrss
      - DB_USER=postgres1 
      - DB_PASS=ttrssxi # 修改为上面设置的数据库密码
      - ENABLE_PLUGINS=auth_internal,fever,mercury_fulltext,share,bookmarklets #默认开启的插件
      
      - TIME_ZONE="Beijing"  # 时区一定要设正确！
      - SMTP_SERVER="mail"
      - SMTP_PORT="25"
      - SMTP_LOGIN="none"
      - SMTP_PASSWORD="none"
      - SMTP_AUTENTICATION="none"  # 使用自建的 smtp 服务，无需验证
      #- SMTP_SECURE=ssl
      
    stdin_open: true
    tty: true
    restart: always
    depends_on:   #本服务启动，需要依赖哪些别的服务，这些服务就会先于该服务启动
        - database.postgres
    # command: sh -c 'sh /wait-for.sh database.postgres:5432 -- php /configure-db.php && exec s6-svscan /etc/s6/'
    
  service.mercury: # set Mercury Parser API endpoint to `service.mercury:3000` on TTRSS plugin setting page
    image: wangqiru/mercury-parser-api:latest
    container_name: ttrss-mercury
    # ports:
    #   - 3000:3000 # 开放端口给外部使用
    # expose:
    #   - 3001
    restart: always
    
#   service.opencc: # set OpenCC API endpoint to `service.opencc:3000` on TTRSS plugin setting page #繁体到中文插件，不需要的话可以删除
#     image: wangqiru/opencc-api-server:latest
#     container_name: ttrss-opencc
#     environment:
#       NODE_ENV: production
#     expose:
#       - 3000  #将当前容器的端口3000和8000暴露给link到本容器的容器。
#     restart: always  
    
  service.rsshub:
    image: diygod/rsshub
    container_name: rsshub-app
    restart: always
    ports:
        - 1200:80
    environment:
        NODE_ENV: production
        CACHE_TYPE: redis
        REDIS_URL: 'redis://redis:6379/'
#         PUPPETEER_WS_ENDPOINT: 'ws://browserless:3000'
#         PROXY_PROTOCOL: socks
#         PROXY_HOST: xxxxrss
#         PROXY_PORT: 1080
        PORT: 80
#     depends_on:
#         - redis
#         - browserless
        
#   browserless:
#       image: browserless/chrome
#       restart: always
  
  mail:
    image: namshi/smtp
    container_name: ttrss-smtp
    restart: always
    environment:
      RELAY_NETWORKS: :0.0.0.0/0  # 允许任何人发送邮件
      
#   redis:
#       image: redis:alpine  
#       container_name: 'redis'
#       restart: always
#       command:
#         --requirepass "xi" #这一行是设置密码
# #       privileged: true      #使用该参数，container内的root拥有真正的root权限
#       volumes:
#         - redis-data:/data
        
volumes:
    rsshub_and_ttrss-data:
