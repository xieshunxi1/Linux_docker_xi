version: "3"
# 将rsshub和ttrss一起部署，并通过容器间的80端口打通访问
services:
  database.postgres:
    image: postgres:12.4-alpine
    container_name: ttrss-postgres
    environment:
      - POSTGRES_PASSWORD=ttrssxi # please change the password
    volumes:
      - /volume1/docker/ttrss1/data/alpine/:/var/lib/postgresql/data # persist postgres data to ~/postgres/data/ on the host
    restart: always
    ports:
      - 15432:5432 # 开放端口给外部使用
      
  service.rss:
    image: wangqiru/ttrss:latest
    container_name: ttrss
    ports:
      - 181:80 # 冒号之前是你需要访问的端口，后面的80不需要修改
    environment:
      - SELF_URL_PATH=http://10.60.32.3:181/ # 修改为你自己的域名+端口
      - DB_HOST=database.postgres
      - DB_PORT=5432
      - DB_NAME=ttrss
      - DB_USER=postgres
      - DB_PASS=ttrssxi # 修改为上面设置的数据库密码
      - ENABLE_PLUGINS=auth_internal,fever # auth_internal is required. Plugins enabled here will be enabled for all users as system plugins
    stdin_open: true
    tty: true
    restart: always
    command: sh -c 'sh /wait-for.sh database.postgres:5432 -- php /configure-db.php && exec s6-svscan /etc/s6/'
  service.mercury: # set Mercury Parser API endpoint to `service.mercury:3000` on TTRSS plugin setting page
    image: wangqiru/mercury-parser-api:latest
    container_name: ttrss-mercury
    expose:
      - 3000
    restart: always
    
#   service.opencc: # set OpenCC API endpoint to `service.opencc:3000` on TTRSS plugin setting page #繁体到中文插件，不需要的话可以删除
#     image: wangqiru/opencc-api-server:latest
#     container_name: ttrss-opencc
#     environment:
#       NODE_ENV: production
#     expose:
#       - 3000
#     restart: always  
    
  service.rsshub:
    image: diygod/rsshub
    container_name: rsshub
    restart: always
    expose:
      - 80
    ports:
        - '1200:80'
    environment:
        NODE_ENV: production
#         CACHE_TYPE: redis
#         REDIS_URL: 'redis://redis:6379/'
#         PUPPETEER_WS_ENDPOINT: 'ws://browserless:3000'
#         PROXY_PROTOCOL: socks
#         PROXY_HOST: xxxxrss
#         PROXY_PORT: 1080
        PORT: 80
#     depends_on:
#         - redis
#         - browserless
        
#   browserless:
#       image: browserless/chrome
#       restart: always
      
#   redis:
#       image: redis:alpine
#       restart: always
#       volumes:
#         - redis-data:/data
        
volumes:
    redis-data:
